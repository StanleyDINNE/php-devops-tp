version: 2.1

# List of all environment variables accessible in this config file
# https://circleci.com/docs/2.0/env-vars/#built-in-environment-variables

# Recommendations
# ---------------

# General Principles:
#
#  1. Descriptive: The job name should clearly describe what the job does.
#  2. Concise: Names should be as short as possible while still being descriptive.
#  3. Consistent: Use a consistent format or pattern for all job names.
#  4. Avoid Ambiguous Abbreviations: If you use abbreviations, ensure they are widely understood.
#
# Naming Convention Proposal:
#
#  1. Prefixes based on the nature of the job:
#     - build-: for jobs related to building or installation.
#     - lint-: for jobs related to code quality checking.
#     - test-: for jobs related to testing.
#     - security-: for jobs related to security.
#     - metrics-: for jobs related to metrics generation.
#     - deploy-: for jobs related to deployment.
#     - notify-: for jobs related to notifications.
#     - debug-: for jobs related to debugging.
#     - setup-: for jobs related to set up.
#     - init-: for jobs related to initialization.
#     - generate-: for jobs related to generation.
#     - validate-: for jobs related to validation.
#     - compile-: for jobs related to compilation.
#     - e2e-: for jobs related to end-to-end testing.
#
#  2. Suffixes based on the specific tool or task:
#  For example, for a job that uses PHP_CodeSniffer, use phpcs as a suffix.

# Default configuration for persist_to_workspace and attach_workspace commands
persist_to_workspace: &persist_to_workspace
  persist_to_workspace:
    root: .
    paths:
      - .

attach_workspace: &attach_workspace
  attach_workspace:
    # Must be absolute path or relative path from working_directory
    at: ~/project

# Only keep the reports
report_persist: &report_persist
  persist_to_workspace:
    root: ~/project
    paths:
      - reports

# This main executor is used by all jobs unless otherwise specified
executors:
  php-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/php:8.2
        name: localhost
  builder-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/php:8.2-node
        name: localhost
  simple-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/base:stable
        name: localhost

jobs:
  debug-info:
    executor: php-executor
    steps:
      - run:
          name: Debug
          command: |
            echo "Current user: $USER"
            echo "Home directory: $HOME"
            echo "Current shell: $SHELL"
            echo "Operating system: $(uname -a)"
            echo "Current path: $PATH"
            echo "Current working directory: $(pwd)"
            echo "Current date: $(date)"
            ls -la
            echo "--------------------"
            env

  waiter-lint_reports:
    executor: simple-executor
    steps:
      - run: |
          while [[ $(curl --location --request GET "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/job" --header "Circle-Token: $CIRCLECI_API_TOKEN" | jq -r '.items[]|select(.name | test("^(?!waiter).*$"))|.status' | grep -c "running") -gt 0 ]]
            do
              sleep 1
            done
      - run: echo "All required jobs have now completed"

  waiter-metrics_reports:
    executor: simple-executor
    steps:
      - run: |
          while [[ $(curl --location --request GET "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/job" --header "Circle-Token: $CIRCLECI_API_TOKEN" | jq -r '.items[]|select(.name  | test("^(?!waiter).*$"))|.status' | grep -c "running") -gt 0 ]]
            do
              sleep 1
            done
      - run: echo "All required jobs have now completed"

  build-setup:
    executor: php-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: composer install --no-interaction --no-ansi --prefer-dist
      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.lock" }}
      - *persist_to_workspace

  # Passthrough job to create a report directory
  lint-setup:
    executor: simple-executor
    steps:
      - *attach_workspace
      - run:
          name: Create report folder
          command: mkdir -p ~/project/reports/lint
      - *persist_to_workspace

  lint-phpcs:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install PHP_CodeSniffer and PHPCompatibility
          command: composer require --dev "squizlabs/php_codesniffer=*" "phpcompatibility/php-compatibility=*"
      - run:
          name: Run PHP_CodeSniffer with Custom Ruleset in the project root
          command: |
            ./vendor/bin/phpcs --standard=phpcs.xml --report-file=reports/lint/phpcs-report.txt --report=checkstyle --extensions=php --ignore=vendor/ .
            result=$?
            if [ $result -eq 1 ] || [ $result -eq 2 ]; then
              exit 0
            fi
            exit $result
      # - *report_persist
      - store_artifacts:
          path: reports/lint/phpcs-report.txt
          destination: phpcs-report

  lint-phpmd:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install `phpmd`
          command: composer require --dev "phpmd/phpmd=@stable"
      - run:
          name: Run phpmd
          command: |
            php ./vendor/bin/phpmd src/ html .circleci/plugins/phpmd_ruleset.xml > reports/lint/phpmd-report.html
            result=$?
            if [[ $result == 0 ]]; then
              echo "No exception of rule violation detected."
            elif [[ $result == 1 ]]; then
              echo "An exception occured during PHPMD execution."
            elif [[ $result == 2 ]]; then
              echo "Rule violations detected."
              echo 'You can also prevent this behaviour with the `--ignore-violations-on-exit` flag, which will result to a 0 even if any violations are found.'
            elif [[ $result == 3 ]]; then
              echo "Some tested files could not processed"
            else
              echo "An unknown exception occured"
            fi
            exit $result
      # - *report_persist
      - store_artifacts:
          path: reports/lint/phpmd-report.html
          destination: phpmd-report

  # lint-php-doc-check:
  #   executor: php-executor
  #   steps:
  #     - *attach_workspace
  #     - run:
  #         name: Install `php-doc-check`
  #         command: composer require --dev "niels-de-blaauw/php-doc-check=*"
  #     - run:
  #         name: Run php-doc-check
  #         command: # TODO
  #     - *report_persist

  lint-reports:
    executor: simple-executor
    steps:
      - attach_workspace:
          at: ~/project/reports/lint
      - store_artifacts:
          path: phpcs-report.txt
          destination: phpcs-report
      - store_artifacts:
          path: phpmd-report.html
          destination: phpmd-report

  # Passthrough job to create a report directory
  metrics-setup:
    executor: simple-executor
    steps:
      - *attach_workspace
      - run:
          name: Create report folder
          command: mkdir -p ~/project/reports/metrics
      - *persist_to_workspace

  metrics-phpmetrics:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install `phpmetrics`
          command: |
            composer require --dev "phpmetrics/phpmetrics=*"
            composer update
            composer install
      - run:
          name: Run phpmetrics
          command: |
            php ./vendor/bin/phpmetrics --report-html=reports/metrics/phpmetrics src/
            exit $?
      # - *report_persist
      - store_artifacts:
          path: reports/metrics/phpmetrics # Directory containing stuff and "index.html"
          destination: phpmetrics-report

  metrics-phploc:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install `phploc`
          command: wget https://phar.phpunit.de/phploc.phar
      - run:
          name: Run phploc
          command: php phploc.phar src/ > reports/metrics/phploc-report.txt
      # - *report_persist
      - store_artifacts:
          path: reports/metrics/phploc-report.txt
          destination: phploc-report

  metrics-reports:
    executor: simple-executor
    steps:
      - attach_workspace:
          at: ~/project/reports/metrics
      - store_artifacts:
          path: phpmetrics # Directory containing stuff and "index.html"
          destination: phpmetrics-report
      - store_artifacts:
          path: phploc-report.txt
          destination: phploc-report

  security-check-dependencies:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install local-php-security-checker
          command: |
            curl -L -o local-php-security-checker https://github.com/fabpot/local-php-security-checker/releases/download/v2.0.6/local-php-security-checker_2.0.6_linux_amd64
            chmod +x local-php-security-checker
      - run:
          name: Run local-php-security-checker
          command: ./local-php-security-checker --format=json --no-dev > security-report.json
      - store_artifacts:
          path: security-report.json
          destination: security-report

  test-phpunit:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Check if PHPUnit tests are present, otherwise skip the job
          command: |
            if [ ! -f "phpunit.xml" ]; then
              echo "No PHPUnit tests found, skipping job."
              echo "export SKIP_PHPUNIT=true" >> $BASH_ENV
              circleci step halt
            else
              echo "Unit tests found (via 'phpunit.xml' file)"
            fi
      - run:
          name: Install PHPUnit
          command: composer require --dev phpunit/phpunit
      - run:
          name: Run PHPUnit
          command: ./vendor/bin/phpunit --testsuite=Unit
      - store_test_results:
          path: test-results

  build-docker-image:
    executor: builder-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: default
          docker_layer_caching: true
      - run:
          name: Build and Push Docker Image to GHCR (GitHub Container Registry)
          command: |
            if [ ! -z "$SKIP_BUILD" ]; then
              echo "Skipping build"
              circleci step halt
              exit 0
            fi

            # Sanitize the repository name, branch name, and the tag
            REPOSITORY=$(echo "ghcr.io/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME" | tr '[:upper:]' '[:lower:]' | tr -d '_')
            function smallcaps_alphanum_max128 {
              read name
              echo "$name" | tr '[:upper:]' '[:lower:]' | tr '/' '-' | tr -cd '[:alnum:]._-' | cut -c 1-128
            }
            BRANCH="$(echo $CIRCLE_BRANCH | smallcaps_alphanum_max128)"
            TAG="$(echo $CIRCLE_TAG | smallcaps_alphanum_max128)"

            # Decide if using compliant TAG, or default to BRANCH_date
            if [[ ! "$TAG" =~ ^v([0-9]{1,3}\.){2}[0-9]{1,3}$ ]]; then
              [[ -z "$TAG" ]] \
                && echo "Tag not set on commit." \
                || echo 'Tag not compliant with standard format. Tag should be named "v${major}.${minor}.${revision}" with each digit in range 0..999. E.g. "v3.7.72"'
              echo "Defaulting to branch name + today's date as the Docker image tag. E.g. \"main_1970-01-01\""
              TAG="${BRANCH}_$(date +%Y-%m-%d)"
            fi

            # Login to GHCR
            echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin

            # Build the Docker image
            docker build \
            -f docker/Dockerfile \
            -t $REPOSITORY:$TAG \
            --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
            --build-arg TAG="${TAG}" \
            --build-arg GIT_COMMIT=$(git rev-parse -q --verify HEAD) \
            --build-arg GIT_URL=$(echo ${CIRCLE_REPOSITORY_URL} | sed -e 's/^git@/https:\/\//g' -e 's/\.git$//g' -e 's/:/\//g') \
            --build-arg SQLITE_VERSION=3430200 \
            --build-arg SQLITE_YEAR=2023 \
            --build-arg PROJECT_USERNAME=$CIRCLE_PROJECT_USERNAME \
            .

            docker tag $REPOSITORY:$TAG $REPOSITORY:latest

            # Push the Docker image
            docker push $REPOSITORY:$TAG
            docker push $REPOSITORY:latest

  deploy-ssh-staging:
    executor: simple-executor
    environment:
      # Used in the injected ssh command, it returns "php: command not found" for some odd reason
      # PHP_FPM_VERSION=$(php -v | head -n 1 | cut -d ' ' -f 2 | cut -d '.' -f 1-2)
      PHP_FPM_VERSION: "8.2"
    steps:
      - add_ssh_keys:
          fingerprints:
            - "$STAGING_SSH_FINGERPRINT"
      # /var/www/html: Content deleted first, then re-created, be careful
      - deploy:
          name: Deploy to AWS
          # Thanks to https://stackoverflow.com/a/67055385
          command: |
            set -x
            ssh -o StrictHostKeyChecking=no $STAGING_SSH_USER@$STAGING_SSH_HOST \<< EOF
            cd "/home/$STAGING_SSH_USER/$CIRCLE_PROJECT_REPONAME" # `STAGING_DEPLOY_DIRECTORY`
            PHP_FPM_VERSION="8.2"
            git checkout --track origin/$CIRCLE_BRANCH
            git reset --hard origin/$CIRCLE_BRANCH # To avoid conflict with ammend commits, merges, etc. : discard local + pull
            composer install --optimize-autoloader --no-interaction --prefer-dist
            sudo rm -rf /var/www/html/*
            sudo cp -r ./* /var/www/html
            (flock -w 10 9 || exit 1; sudo -S service php${PHP_FPM_VERSION}-fpm restart ) 9>/tmp/fpm.lock
            EOF

  # Utilisation de l'image docker sur le serveur de production
  deploy-ssh-production:
    executor: simple-executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "$PRODUCTION_SSH_FINGERPRINT"
      - deploy:
          name: Deploy docker image to AWS
          command: |
            REPOSITORY=$(echo "ghcr.io/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME" | tr '[:upper:]' '[:lower:]' | tr -d '_')
            CONTAINER_NAME=$(echo "${CIRCLE_PROJECT_REPONAME}_latest_container" | tr '[:upper:]' '[:lower:]' | tr -d '_')

            set -x
            ssh -o StrictHostKeyChecking=no $PRODUCTION_SSH_USER@$PRODUCTION_SSH_HOST \<< EOF
            sudo docker stop "$CONTAINER_NAME"
            sudo docker rm "$CONTAINER_NAME"
            sudo docker pull "$REPOSITORY:latest"
            sudo docker run -e INFISICAL_API_TOKEN="$INFISICAL_API_TOKEN" --detach --publish 80:80 --name "$CONTAINER_NAME" "$REPOSITORY:latest"
            sudo docker ps
            EOF

workflows:
  main_workflow:
    jobs:
      - debug-info
      - build-setup
      - lint-setup:
          requires:
            - build-setup
      - lint-phpcs:
          requires:
            - lint-setup
      - lint-phpmd:
          requires:
            - lint-setup
      # - waiter-lint_reports:
      #     requires:
      #       - build-setup
      # - lint-reports:
      #     requires:
      #       # - waiter-lint_reports
      #       - lint-phpcs
      #       - lint-phpmd
      - metrics-setup:
          requires:
            - build-setup
      - metrics-phpmetrics:
          requires:
            - metrics-setup
      - metrics-phploc:
          requires:
            - metrics-setup
      # - waiter-metrics_reports:
      #     requires:
      #       - build-setup
      # - metrics-reports:
      #     requires:
      #       # - waiter-metrics_reports
      #       - metrics-phpmetrics
      #       - metrics-phploc
      - security-check-dependencies:
          requires:
            - build-setup
      - test-phpunit:
          requires:
            - build-setup
      # # Not needed
      # - hold:
      #     type: approval
      #     filters:
      #       branches:
      #         only:
      #           - main
      #           # - master
      #           - /^release\/.*/
      - deploy-ssh-staging:
          # requires:
          #   - hold
          context:
            - api_tokens-context
          filters:
            branches:
              only:
                # - develop
                - /^release\/.*/

  container_workflow:
    jobs:
      - build-docker-image:
          context:
            - api_tokens-context
          filters:
            branches:
              only:
                # - master
                - main
                # - develop
                # - /^feature\/.*/
                - /^release\/.*/
                # - /^hotfix\/.*/
                # - /^bugfix\/.*/
            # tags:
            #   only:
            #     - /^release-.*/
      - deploy-ssh-production:
          requires:
            - build-docker-image
            # - hold
          context:
            - api_tokens-context
          filters:
            branches:
              only:
                - main
                # - /^release\/.*/
                # - master
